# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2014 Daniel Kastl, Frédéric Junod
# This file is distributed under the same license as the Workshop - FOSS4G routing with pgRouting package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Workshop\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-10 09:37+0900\n"
"PO-Revision-Date: 2014-07-01 07:31+0000\n"
"Last-Translator: Daniel Kastl\n"
"Language-Team: French (http://www.transifex.com/projects/p/pgrouting-workshop/language/fr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

# 47fb296209824b068779a934290a31ce
#: ../../chapters/shortest_path.rst:13
msgid "pgRouting Algorithms"
msgstr ""

# 4ce282b9a79f48578be662913fb91ccc
#: ../../chapters/shortest_path.rst:15
msgid ""
"pgRouting was first called *pgDijkstra*, because it implemented only "
"shortest path search with *Dijkstra* algorithm. Later other functions were "
"added and the library was renamed."
msgstr ""

# 53c226698ebc47afa9265f517f1296f4
#: ../../chapters/shortest_path.rst:21
msgid ""
"This chapter will explain selected pgRouting algorithms and which attributes"
" are required."
msgstr ""

# 295299fd9af848b0911ad1d3642bac0f
#: ../../chapters/shortest_path.rst:26
msgid ""
"If you run :doc:`osm2pgrouting <osm2pgrouting>` tool to import "
"*OpenStreetMap* data, the ``ways`` table contains all attributes already to "
"run all shortest path functions. The ``ways`` table of the ``pgrouting-"
"workshop`` database of the :doc:`previous chapter <topology>` is missing "
"several attributes instead, which are listed as **Prerequisites** in this "
"chapter."
msgstr ""

# 2ceddedaaeb844edb68ea202ee62f77b
#: ../../chapters/shortest_path.rst:32
msgid "Shortest Path Dijkstra"
msgstr ""

# 49aaabd99ce1423f8a0ecc9096253100
#: ../../chapters/shortest_path.rst:34
msgid ""
"Dijkstra algorithm was the first algorithm implemented in pgRouting. It "
"doesn't require other attributes than ``source`` and ``target`` ID, ``id`` "
"attribute and ``cost``. It can distinguish between `directed "
"<http://en.wikipedia.org/wiki/Directed_graph>`_ and undirected graphs. You "
"can specify if your network has ``reverse cost`` or not."
msgstr ""

# 7f533317ffad4df68c69aa7be819d40a
# f5322168fc2841978158f972da579f9c
# a816524ec0c5450f84bd4a4aebc6642c
#: ../../chapters/shortest_path.rst:37 ../../chapters/shortest_path.rst:131
#: ../../chapters/shortest_path.rst:242
msgid "Prerequisites"
msgstr "Prérequis"

# ce4522684be547afa2b63b812d854cd6
#: ../../chapters/shortest_path.rst:38
msgid ""
"To be able to use ``reverse cost`` you need to add an additional cost "
"column. We can set reverse cost as length."
msgstr ""

# bc3521ed4e74441d8ee318e18c9be0ac
# 2d4f665ef43c4778aeb71a85a4a211bf
# 09d81832d0794b109314317c232cc3ca
#: ../../chapters/shortest_path.rst:46 ../../chapters/shortest_path.rst:157
#: ../../chapters/shortest_path.rst:247
msgid "Description"
msgstr "Description"

# f12688d3d04849a48a3c154308ec46ba
# b5db38d2fff643899f1dfb753395ba87
#: ../../chapters/shortest_path.rst:47 ../../chapters/shortest_path.rst:160
msgid ""
"Returns a set of ``pgr_costResult`` (seq, id1, id2, cost) rows, that make up"
" a path."
msgstr ""

# 295d7e0770cd4a5cadd496c10e6f9ffe
# b0c81488cb3942e69eed8a2b3ed7e508
# 378a1e4c72ef4f2da34089c6387c4245
#: ../../chapters/shortest_path.rst:55 ../../chapters/shortest_path.rst:168
#: ../../chapters/shortest_path.rst:263
msgid "Parameters"
msgstr "Paramètres"

# c9fae122b3cf49ffafc435f0869ac94b
# 1199b7b894dc44649a9cf7699806086a
# 72d37e3b3bfb4f148e81276daeb81947
#: ../../chapters/shortest_path.rst:56 ../../chapters/shortest_path.rst:169
#: ../../chapters/shortest_path.rst:264
msgid ""
"a SQL query, which should return a set of rows with the following columns:"
msgstr "une requête SQL, qui devrait retourner un ensemble de lignes avec les colonnes suivantes :"

# 07f00c7212ac46a9bd2bdfa1f4307b7c
# 3a8d846a64c64fa1b959afddc7e900d8
# 005d2dcb9e9549f6aa555c25408bf1c4
#: ../../chapters/shortest_path.rst:63 ../../chapters/shortest_path.rst:176
#: ../../chapters/shortest_path.rst:271
msgid "``int4`` identifier of the edge"
msgstr "``int4`` identifiant de l'arête"

# fe98a232f49740e2950f290d1ccfc437
# 5ce3afe4353a41589db576a44d35f687
# c6967008475c44cfb45a6d9003fe9e75
#: ../../chapters/shortest_path.rst:64 ../../chapters/shortest_path.rst:177
#: ../../chapters/shortest_path.rst:272
msgid "``int4`` identifier of the source vertex"
msgstr "``int4`` identifiant du sommet source"

# 8895f526e916415a9922599220c4512e
# 63b3dac9ea724e77b62da24805ac1733
# bcf5835f2b7849b6ba491436f69601ca
#: ../../chapters/shortest_path.rst:65 ../../chapters/shortest_path.rst:178
#: ../../chapters/shortest_path.rst:273
msgid "``int4`` identifier of the target vertex"
msgstr "``int4`` identifiant du sommet cible"

# 94b560b5fb93465583f7cac4c9e3e778
# 4e6b5c2ba70643e7b93f538d92d99e89
# 87542a88f86448a8a31b4c20b11206ac
#: ../../chapters/shortest_path.rst:66 ../../chapters/shortest_path.rst:179
#: ../../chapters/shortest_path.rst:274
msgid ""
"``float8`` value, of the edge traversal cost. A negative cost will prevent "
"the edge from being inserted in the graph."
msgstr "``float8`` valeur, du coût de l'arête traversée. Un coût négatif va prévenir l'arête d'être insérée dans le graphe."

# e0524c1b46814a22bf941d668f20a4a5
# bcbe5dea82964c378e869a1654788741
# 9679c6a1ca1f4eaaa568551428205db4
#: ../../chapters/shortest_path.rst:67 ../../chapters/shortest_path.rst:184
#: ../../chapters/shortest_path.rst:275
msgid ""
"(optional) the cost for the reverse traversal of the edge. This is only used"
" when the ``directed`` and ``has_rcost`` parameters are ``true`` (see the "
"above remark about negative costs)."
msgstr "(optionnel) le coût pour la traversée inverse de l'arête. Ceci est seulement utilisé quand les paramètres ``directed`` et ``has_rcost`` sont ``true`` (voir la remarque ci-dessus sur les coûts négatifs)."

# d5d6d9ecae6e44888f8d45ccb8bb81c7
# e79789cf0eee439190a505fcd4322a78
# d485ee37dfe949f2ab70ba47113db7f7
#: ../../chapters/shortest_path.rst:69 ../../chapters/shortest_path.rst:186
#: ../../chapters/shortest_path.rst:277
msgid "``int4`` id of the start point"
msgstr "``int4`` id du point de départ"

# 7b811a10a460490181ee795419bc79d0
# d2120801bd9d4996a80c5f2381a35deb
#: ../../chapters/shortest_path.rst:70 ../../chapters/shortest_path.rst:187
msgid "``int4`` id of the end point"
msgstr "``int4`` id du point final"

# d8d9e63f9335443191230673c220c972
# 34565d3f21ed4c80b43e0deae350c6b2
# 7ffccc2d08714ad492b0b9008a169a32
#: ../../chapters/shortest_path.rst:71 ../../chapters/shortest_path.rst:188
#: ../../chapters/shortest_path.rst:279
msgid "``true`` if the graph is directed"
msgstr "``true`` si le graphe est dirigé"

# bd3e073a63f94136a9b215c0a2f1b686
# 7649a8cd8b124be28d43f0dde95230a2
# 3d52e1dd48e140d49fe4f8c6ab8d68f5
#: ../../chapters/shortest_path.rst:72 ../../chapters/shortest_path.rst:189
#: ../../chapters/shortest_path.rst:280
msgid ""
"if ``true``, the ``reverse_cost`` column of the SQL generated set of rows "
"will be used for the cost of the traversal of the edge in the opposite "
"direction."
msgstr "si ``true``,  la colonne ``reverse_cost`` du SQL générant l'ensemble des lignes va être utilisé pour le coût de la traversée de l'arête dans la direction opposée."

# 0342dd83c4434d978158d8c749daaa25
# 3c9000e1ea394325834e3c62a64bc9a0
#: ../../chapters/shortest_path.rst:74 ../../chapters/shortest_path.rst:191
msgid "Returns set of ``pgr_costResult``:"
msgstr ""

# d7d539277355452d81e986477d178518
# 6e2fb2cea76843c1a91424e0330b5e7e
# cddd18f244164821a04700b28aa3867e
# e66ca5767fff4f42a369e77e1919b579
#: ../../chapters/shortest_path.rst:76 ../../chapters/shortest_path.rst:193
#: ../../chapters/shortest_path.rst:285 ../../chapters/shortest_path.rst:293
msgid "row sequence"
msgstr "séquence de ligne"

# b05d544347b44d7fa519bdee2acda794
# 634ac46419f54f01851d06f4b7a366ab
#: ../../chapters/shortest_path.rst:77 ../../chapters/shortest_path.rst:194
msgid "node ID"
msgstr "ID noeud"

# 9227043825c547cc9d55dc7271d38cef
# a5dbc82444d549e9bba9edf6dddee225
#: ../../chapters/shortest_path.rst:78 ../../chapters/shortest_path.rst:195
msgid "edge ID (``-1`` for the last row)"
msgstr "ID arête (``-1`` pour la dernière ligne)"

# 1618c1553016418eb4646eec559706c9
# d3ff435ff4a649de89d9f98ab080e8c6
#: ../../chapters/shortest_path.rst:79 ../../chapters/shortest_path.rst:196
msgid "cost to traverse from ``id1`` using ``id2``"
msgstr "coût pour traverser depuis ``id1`` en utilisant ``id2``"

# b7c31734e5d74b289de1e41008a4c14a
#: ../../chapters/shortest_path.rst:84
msgid ""
"Many pgRouting functions have ``sql::text`` as one of their arguments. While"
" this may look confusing at first, it makes the functions very flexible as "
"the user can pass any ``SELECT`` statement as function argument as long as "
"the returned result contains the required number of attributes and the "
"correct attribute names."
msgstr ""

# c1e9130f6ba743ccaebc518295e23860
#: ../../chapters/shortest_path.rst:85
msgid "Dijkstra algorithm does not require the network geometry."
msgstr ""

# 8868391762da41f49ee07c046e028777
#: ../../chapters/shortest_path.rst:86
msgid ""
"The function does not return a geometry, but only an ordered list of nodes."
msgstr ""

# 5b39cf246563474e9838973b324843c9
# fd8b543d07194b2f8e5a8a1365662c3f
#: ../../chapters/shortest_path.rst:89 ../../chapters/shortest_path.rst:200
msgid "Example query"
msgstr ""

# c026b4af606e4fb3a75ae140c6e7ea32
#: ../../chapters/shortest_path.rst:90
msgid ""
"``pgr_costResult`` is a common result type used by several pgRouting "
"functions. In the case of ``pgr_dijkstra`` the first column is a sequential "
"ID, followed by node ID, edge ID and cost to pass this edge."
msgstr ""

# 63799fd22252430a80964e3cbb961f50
# d18900067fea498cb0c5891095dce1d4
# ac404b3dddbf446bb7813859ec47963d
# cc03cf7b37f9474680b18a1c412f79ba
#: ../../chapters/shortest_path.rst:104 ../../chapters/shortest_path.rst:214
#: ../../chapters/shortest_path.rst:313 ../../chapters/shortest_path.rst:338
msgid "Query result"
msgstr ""

# 04a9991c47814f25aaf7f8a367bc5b42
#: ../../chapters/shortest_path.rst:120
msgid ""
"With more complex SQL statements, using JOINs for example, the result may be"
" in a wrong order. In that case ``ORDER BY seq`` will ensure that the path "
"is in the right order again."
msgstr ""

# 6aef93cf35254e1d83d9bb423f2a5e21
#: ../../chapters/shortest_path.rst:121
msgid ""
"The returned cost attribute represents the cost specified in the "
"``sql::text`` argument. In this example cost is ``length`` in unit "
"\"kilometers\". Cost may be time, distance or any combination of both or any"
" other attributes or a custom formula."
msgstr ""

# d3943e65cc3b4be09e46bbc9f3d54619
#: ../../chapters/shortest_path.rst:126
msgid "Shortest Path A*"
msgstr ""

# 30c23dd57cf94d59ba7df7be0338cb55
#: ../../chapters/shortest_path.rst:128
msgid ""
"A-Star algorithm is another well-known routing algorithm. It adds "
"geographical information to source and target of each network link. This "
"enables the routing query to prefer links which are closer to the target of "
"the shortest path search."
msgstr ""

# 50038db481274c06a52f6f9e60d98694
#: ../../chapters/shortest_path.rst:132
msgid ""
"For A-Star you need to prepare your network table and add latitute/longitude"
" columns (``x1``, ``y1`` and ``x2``, ``y2``) and calculate their values."
msgstr ""

# 6d8186258e1445cea21c3037121c4555
#: ../../chapters/shortest_path.rst:149
msgid ""
"A bug in a previous version of PostGIS didn't allow the use of "
"``ST_startpoint`` or ``ST_endpoint``."
msgstr ""

# aa74e608e83e4caaae6573a4719f2f77
#: ../../chapters/shortest_path.rst:150
msgid ""
"From PostGIS 2.x ``ST_startpoint`` and ``ST_endpoint`` are only valid for "
"``LINESTRING`` geometry type and will fail with ``MULTILINESTING``."
msgstr ""

# 5192f8dbd59748fdac33bc52f3cef83c
#: ../../chapters/shortest_path.rst:152
msgid ""
"Therefor a slightly more difficult looking query is used. If the network "
"data really contains multi-geomtery linestrings the query might give the "
"wrong start and end point. But in general data has been imported as "
"``MULTILINESTING`` even if it only contains ``LINESTRING`` geometries."
msgstr ""

# 562ea7ae4c234767bacbf0169fac2cb0
#: ../../chapters/shortest_path.rst:158
msgid ""
"Shortest Path A-Star function is very similar to the Dijkstra function, "
"though it prefers links that are close to the target of the search. The "
"heuristics of this search are predefined, so you need to recompile pgRouting"
" if you want to make changes to the heuristic function itself."
msgstr ""

# e107c850e85349d4b0d0c875b6d6c981
#: ../../chapters/shortest_path.rst:180
msgid "``x`` coordinate of the start point of the edge"
msgstr "``x`` coordonnée du point de départ de l'arête"

# e3a637f10b7b4a389638d569ad648332
#: ../../chapters/shortest_path.rst:181
msgid "``y`` coordinate of the start point of the edge"
msgstr "``y`` coordonnée du point de départ de l'arête"

# 91cacca69f4343eaa8ace243a456d622
#: ../../chapters/shortest_path.rst:182
msgid "``x`` coordinate of the end point of the edge"
msgstr "``x`` coordonnée du point final de l'arête"

# 740fa1b098d14efd9de1820e3756a3e7
#: ../../chapters/shortest_path.rst:183
msgid "``y`` coordinate of the end point of the edge"
msgstr "``y`` coordonnée du point final de l'arête"

# 922018146e944ce0b7d29f58fbf060bb
#: ../../chapters/shortest_path.rst:230
msgid ""
"The result of Dijkstra and A-Star are the same, which should be the case."
msgstr ""

# 548045f977ea4711b2df65e74a5ad346
#: ../../chapters/shortest_path.rst:231
msgid ""
"A-Star is supposed to be faster than Dijkstra algorithm as the network size "
"is getting larger. But in case of pgRouting the algorithm speed advantage "
"does not matter really compared the time required to select the network data"
" and build the graph."
msgstr ""

# 683acb0946b2416cbc9bbee5dc8ba14c
#: ../../chapters/shortest_path.rst:237
msgid "Multiple Shortest Paths with kDijkstra"
msgstr ""

# fc43f1c0f4a34df29b77da93f85a01da
#: ../../chapters/shortest_path.rst:239
msgid ""
"The kDijkstra functions are very similar to the Dijkstra function but they "
"allow to set multiple destinations with a single function call."
msgstr ""

# f7bf040ca56049768eb441d31083beac
#: ../../chapters/shortest_path.rst:243
msgid "kDijkstra doesn't require additional attributes to Dijkstra algorithm."
msgstr ""

# 1e193f9334c64e6197f08a1b14591e1a
#: ../../chapters/shortest_path.rst:248
msgid ""
"If the main goal is to calculate the total cost, for example to calculate "
"multiple routes for a distance matrix, then ``pgr_kdijkstraCost`` returns a "
"more compact result. In case the paths are important ``pgr_kdijkstraPath`` "
"function returns a result similar to A* or Dijkstra for each destination."
msgstr ""

# 579b54f4e0bc41bc993dcc85870532d4
#: ../../chapters/shortest_path.rst:251
msgid ""
"Both functions return a set of ``pgr_costResult`` (seq, id1, id2, cost) "
"rows, that summarize the path cost or return the paths."
msgstr ""

# 24ace859adc74619959f6ad2671643e3
#: ../../chapters/shortest_path.rst:278
msgid "``int4[]`` an array of ids of the end points"
msgstr "``int4[]`` un tableau d'ids des points finaux"

# 5021f848a56044a6ae9344c3f77dacb2
#: ../../chapters/shortest_path.rst:283
msgid "``pgr_kdijkstraCost`` returns set of ``pgr_costResult``:"
msgstr ""

# c4294f9b0541465fbf5c8384c0fcfcf4
#: ../../chapters/shortest_path.rst:286
msgid ""
"path vertex source id (this will always be source start point in the query)."
msgstr "id source du chemin de sommets (cela va toujours être la source du point final dans la requête)."

# dc314ba056774e8f86375b186a516882
#: ../../chapters/shortest_path.rst:287
msgid "path vertex target id"
msgstr "id cible du sommet du chemin"

# e53052e344054df582523bbe14aafce1
#: ../../chapters/shortest_path.rst:288
msgid ""
"cost to traverse the path from ``id1`` to ``id2``. Cost will be -1.0 if "
"there is no path to that target vertex id."
msgstr "coût pour traverser le chemin de ``id1`` à ``id2``. Le coût sera de -1.0 si il n'y a pas de chemin pour cet id de sommet cible."

# f5922b5d0732406da6beee23f3a61fd8
#: ../../chapters/shortest_path.rst:291
msgid "``pgr_kdijkstraPath`` returns set of ``pgr_costResult``:"
msgstr ""

# 9c6e5e946454476994b208d714fec541
#: ../../chapters/shortest_path.rst:294
msgid "path vertex target id (identifies the target path)."
msgstr ""

# 263c235c6b8b4abc8898dad60f6f9e1e
#: ../../chapters/shortest_path.rst:295
msgid "path edge id"
msgstr "id arête du chemin"

# a3959e9191804fb6a105829b35c6e180
#: ../../chapters/shortest_path.rst:296
msgid "cost to traverse this edge or -1.0 if there is no path to this target"
msgstr "coût pour traverser l'arête ou -1.0 si il n'y a pas de chemin pour cette cible"

# ba538cacda834c579e6e2ee60f308de4
#: ../../chapters/shortest_path.rst:300
msgid "Example query ``pgr_kdijkstraCost``"
msgstr ""

# 769962f349f64c5a895854bf7b6ca9ba
#: ../../chapters/shortest_path.rst:325
msgid "Example query ``pgr_kdijkstraPath``"
msgstr ""

# 4e4e56f7c500405ba2c3325d6b2a6e5f
#: ../../chapters/shortest_path.rst:355
msgid ""
"There are many other functions available with the new pgRouting 2.0 release,"
" but most of them work in a similar way, and it would take too much time to "
"mention them all in this workshop. For the complete list of pgRouting "
"functions see the API documentation: http://docs.pgrouting.org/"
msgstr ""
