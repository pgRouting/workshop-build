# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2014 Daniel Kastl, Frédéric Junod
# This file is distributed under the same license as the Workshop - FOSS4G routing with pgRouting package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Workshop - FOSS4G routing with pgRouting 2014\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-10 09:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../chapters/shortest_path.rst:13
# 47fb296209824b068779a934290a31ce
msgid "pgRouting Algorithms"
msgstr ""

#: ../../chapters/shortest_path.rst:15
# 4ce282b9a79f48578be662913fb91ccc
msgid "pgRouting was first called *pgDijkstra*, because it implemented only shortest path search with *Dijkstra* algorithm. Later other functions were added and the library was renamed."
msgstr ""

#: ../../chapters/shortest_path.rst:21
# 53c226698ebc47afa9265f517f1296f4
msgid "This chapter will explain selected pgRouting algorithms and which attributes are required."
msgstr ""

#: ../../chapters/shortest_path.rst:26
# 295299fd9af848b0911ad1d3642bac0f
msgid "If you run :doc:`osm2pgrouting <osm2pgrouting>` tool to import *OpenStreetMap* data, the ``ways`` table contains all attributes already to run all shortest path functions. The ``ways`` table of the ``pgrouting-workshop`` database of the :doc:`previous chapter <topology>` is missing several attributes instead, which are listed as **Prerequisites** in this chapter."
msgstr ""

#: ../../chapters/shortest_path.rst:32
# 2ceddedaaeb844edb68ea202ee62f77b
msgid "Shortest Path Dijkstra"
msgstr ""

#: ../../chapters/shortest_path.rst:34
# 49aaabd99ce1423f8a0ecc9096253100
msgid "Dijkstra algorithm was the first algorithm implemented in pgRouting. It doesn't require other attributes than ``source`` and ``target`` ID, ``id`` attribute and ``cost``. It can distinguish between `directed <http://en.wikipedia.org/wiki/Directed_graph>`_ and undirected graphs. You can specify if your network has ``reverse cost`` or not."
msgstr ""

#: ../../chapters/shortest_path.rst:37
#: ../../chapters/shortest_path.rst:131
#: ../../chapters/shortest_path.rst:242
# 7f533317ffad4df68c69aa7be819d40a
# f5322168fc2841978158f972da579f9c
# a816524ec0c5450f84bd4a4aebc6642c
msgid "Prerequisites"
msgstr ""

#: ../../chapters/shortest_path.rst:38
# ce4522684be547afa2b63b812d854cd6
msgid "To be able to use ``reverse cost`` you need to add an additional cost column. We can set reverse cost as length."
msgstr ""

#: ../../chapters/shortest_path.rst:46
#: ../../chapters/shortest_path.rst:157
#: ../../chapters/shortest_path.rst:247
# bc3521ed4e74441d8ee318e18c9be0ac
# 2d4f665ef43c4778aeb71a85a4a211bf
# 09d81832d0794b109314317c232cc3ca
msgid "Description"
msgstr ""

#: ../../chapters/shortest_path.rst:47
#: ../../chapters/shortest_path.rst:160
# f12688d3d04849a48a3c154308ec46ba
# b5db38d2fff643899f1dfb753395ba87
msgid "Returns a set of ``pgr_costResult`` (seq, id1, id2, cost) rows, that make up a path."
msgstr ""

#: ../../chapters/shortest_path.rst:55
#: ../../chapters/shortest_path.rst:168
#: ../../chapters/shortest_path.rst:263
# 295d7e0770cd4a5cadd496c10e6f9ffe
# b0c81488cb3942e69eed8a2b3ed7e508
# 378a1e4c72ef4f2da34089c6387c4245
msgid "Parameters"
msgstr ""

#: ../../chapters/shortest_path.rst:56
#: ../../chapters/shortest_path.rst:169
#: ../../chapters/shortest_path.rst:264
# c9fae122b3cf49ffafc435f0869ac94b
# 1199b7b894dc44649a9cf7699806086a
# 72d37e3b3bfb4f148e81276daeb81947
msgid "a SQL query, which should return a set of rows with the following columns:"
msgstr ""

#: ../../chapters/shortest_path.rst:63
#: ../../chapters/shortest_path.rst:176
#: ../../chapters/shortest_path.rst:271
# 07f00c7212ac46a9bd2bdfa1f4307b7c
# 3a8d846a64c64fa1b959afddc7e900d8
# 005d2dcb9e9549f6aa555c25408bf1c4
msgid "``int4`` identifier of the edge"
msgstr ""

#: ../../chapters/shortest_path.rst:64
#: ../../chapters/shortest_path.rst:177
#: ../../chapters/shortest_path.rst:272
# fe98a232f49740e2950f290d1ccfc437
# 5ce3afe4353a41589db576a44d35f687
# c6967008475c44cfb45a6d9003fe9e75
msgid "``int4`` identifier of the source vertex"
msgstr ""

#: ../../chapters/shortest_path.rst:65
#: ../../chapters/shortest_path.rst:178
#: ../../chapters/shortest_path.rst:273
# 8895f526e916415a9922599220c4512e
# 63b3dac9ea724e77b62da24805ac1733
# bcf5835f2b7849b6ba491436f69601ca
msgid "``int4`` identifier of the target vertex"
msgstr ""

#: ../../chapters/shortest_path.rst:66
#: ../../chapters/shortest_path.rst:179
#: ../../chapters/shortest_path.rst:274
# 94b560b5fb93465583f7cac4c9e3e778
# 4e6b5c2ba70643e7b93f538d92d99e89
# 87542a88f86448a8a31b4c20b11206ac
msgid "``float8`` value, of the edge traversal cost. A negative cost will prevent the edge from being inserted in the graph."
msgstr ""

#: ../../chapters/shortest_path.rst:67
#: ../../chapters/shortest_path.rst:184
#: ../../chapters/shortest_path.rst:275
# e0524c1b46814a22bf941d668f20a4a5
# bcbe5dea82964c378e869a1654788741
# 9679c6a1ca1f4eaaa568551428205db4
msgid "(optional) the cost for the reverse traversal of the edge. This is only used when the ``directed`` and ``has_rcost`` parameters are ``true`` (see the above remark about negative costs)."
msgstr ""

#: ../../chapters/shortest_path.rst:69
#: ../../chapters/shortest_path.rst:186
#: ../../chapters/shortest_path.rst:277
# d5d6d9ecae6e44888f8d45ccb8bb81c7
# e79789cf0eee439190a505fcd4322a78
# d485ee37dfe949f2ab70ba47113db7f7
msgid "``int4`` id of the start point"
msgstr ""

#: ../../chapters/shortest_path.rst:70
#: ../../chapters/shortest_path.rst:187
# 7b811a10a460490181ee795419bc79d0
# d2120801bd9d4996a80c5f2381a35deb
msgid "``int4`` id of the end point"
msgstr ""

#: ../../chapters/shortest_path.rst:71
#: ../../chapters/shortest_path.rst:188
#: ../../chapters/shortest_path.rst:279
# d8d9e63f9335443191230673c220c972
# 34565d3f21ed4c80b43e0deae350c6b2
# 7ffccc2d08714ad492b0b9008a169a32
msgid "``true`` if the graph is directed"
msgstr ""

#: ../../chapters/shortest_path.rst:72
#: ../../chapters/shortest_path.rst:189
#: ../../chapters/shortest_path.rst:280
# bd3e073a63f94136a9b215c0a2f1b686
# 7649a8cd8b124be28d43f0dde95230a2
# 3d52e1dd48e140d49fe4f8c6ab8d68f5
msgid "if ``true``, the ``reverse_cost`` column of the SQL generated set of rows will be used for the cost of the traversal of the edge in the opposite direction."
msgstr ""

#: ../../chapters/shortest_path.rst:74
#: ../../chapters/shortest_path.rst:191
# 0342dd83c4434d978158d8c749daaa25
# 3c9000e1ea394325834e3c62a64bc9a0
msgid "Returns set of ``pgr_costResult``:"
msgstr ""

#: ../../chapters/shortest_path.rst:76
#: ../../chapters/shortest_path.rst:193
#: ../../chapters/shortest_path.rst:285
#: ../../chapters/shortest_path.rst:293
# d7d539277355452d81e986477d178518
# 6e2fb2cea76843c1a91424e0330b5e7e
# cddd18f244164821a04700b28aa3867e
# e66ca5767fff4f42a369e77e1919b579
msgid "row sequence"
msgstr ""

#: ../../chapters/shortest_path.rst:77
#: ../../chapters/shortest_path.rst:194
# b05d544347b44d7fa519bdee2acda794
# 634ac46419f54f01851d06f4b7a366ab
msgid "node ID"
msgstr ""

#: ../../chapters/shortest_path.rst:78
#: ../../chapters/shortest_path.rst:195
# 9227043825c547cc9d55dc7271d38cef
# a5dbc82444d549e9bba9edf6dddee225
msgid "edge ID (``-1`` for the last row)"
msgstr ""

#: ../../chapters/shortest_path.rst:79
#: ../../chapters/shortest_path.rst:196
# 1618c1553016418eb4646eec559706c9
# d3ff435ff4a649de89d9f98ab080e8c6
msgid "cost to traverse from ``id1`` using ``id2``"
msgstr ""

#: ../../chapters/shortest_path.rst:84
# b7c31734e5d74b289de1e41008a4c14a
msgid "Many pgRouting functions have ``sql::text`` as one of their arguments. While this may look confusing at first, it makes the functions very flexible as the user can pass any ``SELECT`` statement as function argument as long as the returned result contains the required number of attributes and the correct attribute names."
msgstr ""

#: ../../chapters/shortest_path.rst:85
# c1e9130f6ba743ccaebc518295e23860
msgid "Dijkstra algorithm does not require the network geometry."
msgstr ""

#: ../../chapters/shortest_path.rst:86
# 8868391762da41f49ee07c046e028777
msgid "The function does not return a geometry, but only an ordered list of nodes."
msgstr ""

#: ../../chapters/shortest_path.rst:89
#: ../../chapters/shortest_path.rst:200
# 5b39cf246563474e9838973b324843c9
# fd8b543d07194b2f8e5a8a1365662c3f
msgid "Example query"
msgstr ""

#: ../../chapters/shortest_path.rst:90
# c026b4af606e4fb3a75ae140c6e7ea32
msgid "``pgr_costResult`` is a common result type used by several pgRouting functions. In the case of ``pgr_dijkstra`` the first column is a sequential ID, followed by node ID, edge ID and cost to pass this edge."
msgstr ""

#: ../../chapters/shortest_path.rst:104
#: ../../chapters/shortest_path.rst:214
#: ../../chapters/shortest_path.rst:313
#: ../../chapters/shortest_path.rst:338
# 63799fd22252430a80964e3cbb961f50
# d18900067fea498cb0c5891095dce1d4
# ac404b3dddbf446bb7813859ec47963d
# cc03cf7b37f9474680b18a1c412f79ba
msgid "Query result"
msgstr ""

#: ../../chapters/shortest_path.rst:120
# 04a9991c47814f25aaf7f8a367bc5b42
msgid "With more complex SQL statements, using JOINs for example, the result may be in a wrong order. In that case ``ORDER BY seq`` will ensure that the path is in the right order again."
msgstr ""

#: ../../chapters/shortest_path.rst:121
# 6aef93cf35254e1d83d9bb423f2a5e21
msgid "The returned cost attribute represents the cost specified in the ``sql::text`` argument. In this example cost is ``length`` in unit \"kilometers\". Cost may be time, distance or any combination of both or any other attributes or a custom formula."
msgstr ""

#: ../../chapters/shortest_path.rst:126
# d3943e65cc3b4be09e46bbc9f3d54619
msgid "Shortest Path A*"
msgstr ""

#: ../../chapters/shortest_path.rst:128
# 30c23dd57cf94d59ba7df7be0338cb55
msgid "A-Star algorithm is another well-known routing algorithm. It adds geographical information to source and target of each network link. This enables the routing query to prefer links which are closer to the target of the shortest path search."
msgstr ""

#: ../../chapters/shortest_path.rst:132
# 50038db481274c06a52f6f9e60d98694
msgid "For A-Star you need to prepare your network table and add latitute/longitude columns (``x1``, ``y1`` and ``x2``, ``y2``) and calculate their values."
msgstr ""

#: ../../chapters/shortest_path.rst:149
# 6d8186258e1445cea21c3037121c4555
msgid "A bug in a previous version of PostGIS didn't allow the use of ``ST_startpoint`` or ``ST_endpoint``."
msgstr ""

#: ../../chapters/shortest_path.rst:150
# aa74e608e83e4caaae6573a4719f2f77
msgid "From PostGIS 2.x ``ST_startpoint`` and ``ST_endpoint`` are only valid for ``LINESTRING`` geometry type and will fail with ``MULTILINESTING``."
msgstr ""

#: ../../chapters/shortest_path.rst:152
# 5192f8dbd59748fdac33bc52f3cef83c
msgid "Therefor a slightly more difficult looking query is used. If the network data really contains multi-geomtery linestrings the query might give the wrong start and end point. But in general data has been imported as ``MULTILINESTING`` even if it only contains ``LINESTRING`` geometries."
msgstr ""

#: ../../chapters/shortest_path.rst:158
# 562ea7ae4c234767bacbf0169fac2cb0
msgid "Shortest Path A-Star function is very similar to the Dijkstra function, though it prefers links that are close to the target of the search. The heuristics of this search are predefined, so you need to recompile pgRouting if you want to make changes to the heuristic function itself."
msgstr ""

#: ../../chapters/shortest_path.rst:180
# e107c850e85349d4b0d0c875b6d6c981
msgid "``x`` coordinate of the start point of the edge"
msgstr ""

#: ../../chapters/shortest_path.rst:181
# e3a637f10b7b4a389638d569ad648332
msgid "``y`` coordinate of the start point of the edge"
msgstr ""

#: ../../chapters/shortest_path.rst:182
# 91cacca69f4343eaa8ace243a456d622
msgid "``x`` coordinate of the end point of the edge"
msgstr ""

#: ../../chapters/shortest_path.rst:183
# 740fa1b098d14efd9de1820e3756a3e7
msgid "``y`` coordinate of the end point of the edge"
msgstr ""

#: ../../chapters/shortest_path.rst:230
# 922018146e944ce0b7d29f58fbf060bb
msgid "The result of Dijkstra and A-Star are the same, which should be the case."
msgstr ""

#: ../../chapters/shortest_path.rst:231
# 548045f977ea4711b2df65e74a5ad346
msgid "A-Star is supposed to be faster than Dijkstra algorithm as the network size is getting larger. But in case of pgRouting the algorithm speed advantage does not matter really compared the time required to select the network data and build the graph."
msgstr ""

#: ../../chapters/shortest_path.rst:237
# 683acb0946b2416cbc9bbee5dc8ba14c
msgid "Multiple Shortest Paths with kDijkstra"
msgstr ""

#: ../../chapters/shortest_path.rst:239
# fc43f1c0f4a34df29b77da93f85a01da
msgid "The kDijkstra functions are very similar to the Dijkstra function but they allow to set multiple destinations with a single function call."
msgstr ""

#: ../../chapters/shortest_path.rst:243
# f7bf040ca56049768eb441d31083beac
msgid "kDijkstra doesn't require additional attributes to Dijkstra algorithm."
msgstr ""

#: ../../chapters/shortest_path.rst:248
# 1e193f9334c64e6197f08a1b14591e1a
msgid "If the main goal is to calculate the total cost, for example to calculate multiple routes for a distance matrix, then ``pgr_kdijkstraCost`` returns a more compact result. In case the paths are important ``pgr_kdijkstraPath`` function returns a result similar to A* or Dijkstra for each destination."
msgstr ""

#: ../../chapters/shortest_path.rst:251
# 579b54f4e0bc41bc993dcc85870532d4
msgid "Both functions return a set of ``pgr_costResult`` (seq, id1, id2, cost) rows, that summarize the path cost or return the paths."
msgstr ""

#: ../../chapters/shortest_path.rst:278
# 24ace859adc74619959f6ad2671643e3
msgid "``int4[]`` an array of ids of the end points"
msgstr ""

#: ../../chapters/shortest_path.rst:283
# 5021f848a56044a6ae9344c3f77dacb2
msgid "``pgr_kdijkstraCost`` returns set of ``pgr_costResult``:"
msgstr ""

#: ../../chapters/shortest_path.rst:286
# c4294f9b0541465fbf5c8384c0fcfcf4
msgid "path vertex source id (this will always be source start point in the query)."
msgstr ""

#: ../../chapters/shortest_path.rst:287
# dc314ba056774e8f86375b186a516882
msgid "path vertex target id"
msgstr ""

#: ../../chapters/shortest_path.rst:288
# e53052e344054df582523bbe14aafce1
msgid "cost to traverse the path from ``id1`` to ``id2``. Cost will be -1.0 if there is no path to that target vertex id."
msgstr ""

#: ../../chapters/shortest_path.rst:291
# f5922b5d0732406da6beee23f3a61fd8
msgid "``pgr_kdijkstraPath`` returns set of ``pgr_costResult``:"
msgstr ""

#: ../../chapters/shortest_path.rst:294
# 9c6e5e946454476994b208d714fec541
msgid "path vertex target id (identifies the target path)."
msgstr ""

#: ../../chapters/shortest_path.rst:295
# 263c235c6b8b4abc8898dad60f6f9e1e
msgid "path edge id"
msgstr ""

#: ../../chapters/shortest_path.rst:296
# a3959e9191804fb6a105829b35c6e180
msgid "cost to traverse this edge or -1.0 if there is no path to this target"
msgstr ""

#: ../../chapters/shortest_path.rst:300
# ba538cacda834c579e6e2ee60f308de4
msgid "Example query ``pgr_kdijkstraCost``"
msgstr ""

#: ../../chapters/shortest_path.rst:325
# 769962f349f64c5a895854bf7b6ca9ba
msgid "Example query ``pgr_kdijkstraPath``"
msgstr ""

#: ../../chapters/shortest_path.rst:355
# 4e4e56f7c500405ba2c3325d6b2a6e5f
msgid "There are many other functions available with the new pgRouting 2.0 release, but most of them work in a similar way, and it would take too much time to mention them all in this workshop. For the complete list of pgRouting functions see the API documentation: http://docs.pgrouting.org/"
msgstr ""

