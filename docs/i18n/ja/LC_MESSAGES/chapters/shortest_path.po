# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2014 Daniel Kastl, Frédéric Junod
# This file is distributed under the same license as the Workshop - FOSS4G routing with pgRouting package.
# 
# Translators:
# Ko Nagase <nagase@georepublic.co.jp>, 2013-2014
# Taro Matsuzawa <taro@georepublic.co.jp>, 2013
msgid ""
msgstr ""
"Project-Id-Version: Workshop\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-10 09:37+0900\n"
"PO-Revision-Date: 2014-11-11 16:01+0000\n"
"Last-Translator: Ko Nagase <nagase@georepublic.co.jp>\n"
"Language-Team: Japanese (http://www.transifex.com/projects/p/pgrouting-workshop/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# 47fb296209824b068779a934290a31ce
#: ../../chapters/shortest_path.rst:13
msgid "pgRouting Algorithms"
msgstr "pgRouting のアルゴリズム"

# 4ce282b9a79f48578be662913fb91ccc
#: ../../chapters/shortest_path.rst:15
msgid ""
"pgRouting was first called *pgDijkstra*, because it implemented only "
"shortest path search with *Dijkstra* algorithm. Later other functions were "
"added and the library was renamed."
msgstr "pgRouting は初めは *pgDijkstra* と呼ばれており、これは *ダイクストラ* 法による最短経路探索のみ実装していたからです。のちに他の機能が追加され、ライブラリの名前が変更されました。"

# 53c226698ebc47afa9265f517f1296f4
#: ../../chapters/shortest_path.rst:21
msgid ""
"This chapter will explain selected pgRouting algorithms and which attributes"
" are required."
msgstr "この章では厳選された pgRouting のアルゴリズムやそれらがどの属性を必要とするかを説明します。"

# 295299fd9af848b0911ad1d3642bac0f
#: ../../chapters/shortest_path.rst:26
msgid ""
"If you run :doc:`osm2pgrouting <osm2pgrouting>` tool to import "
"*OpenStreetMap* data, the ``ways`` table contains all attributes already to "
"run all shortest path functions. The ``ways`` table of the ``pgrouting-"
"workshop`` database of the :doc:`previous chapter <topology>` is missing "
"several attributes instead, which are listed as **Prerequisites** in this "
"chapter."
msgstr "もし :doc:`osm2pgrouting <osm2pgrouting>` ツールを *OpenStreetMap* のデータをインポートするのに実行していたら、 ``ways`` テーブルにすでに全ての最短経路の機能を実行するためのすべての属性が含まれています。 :doc:`前の章 <topology>` の ``pgrouting-workshop`` データベースの ``ways`` テーブルはいくつかの属性が無い代わりに、この章の **前提条件** として紹介します。"

# 2ceddedaaeb844edb68ea202ee62f77b
#: ../../chapters/shortest_path.rst:32
msgid "Shortest Path Dijkstra"
msgstr "ダイクストラ法による最短経路探索"

# 49aaabd99ce1423f8a0ecc9096253100
#: ../../chapters/shortest_path.rst:34
msgid ""
"Dijkstra algorithm was the first algorithm implemented in pgRouting. It "
"doesn't require other attributes than ``source`` and ``target`` ID, ``id`` "
"attribute and ``cost``. It can distinguish between `directed "
"<http://en.wikipedia.org/wiki/Directed_graph>`_ and undirected graphs. You "
"can specify if your network has ``reverse cost`` or not."
msgstr "ダイクストラ法は pgRouting で最初に実装されたアルゴリズムです。このアルゴリズムは ``source`` ID と ``target`` ID と ``id`` と ``cost`` 以外の属性は必要としません。このアルゴリズムは `有向グラフ  <http://en.wikipedia.org/wiki/Directed_graph>`_ と無向グラフを識別することができます。あなたはあなたのネットワークに ``reverse cost`` があるかどうかを指定することが可能です。"

# 7f533317ffad4df68c69aa7be819d40a
# f5322168fc2841978158f972da579f9c
# a816524ec0c5450f84bd4a4aebc6642c
#: ../../chapters/shortest_path.rst:37 ../../chapters/shortest_path.rst:131
#: ../../chapters/shortest_path.rst:242
msgid "Prerequisites"
msgstr "前提条件"

# ce4522684be547afa2b63b812d854cd6
#: ../../chapters/shortest_path.rst:38
msgid ""
"To be able to use ``reverse cost`` you need to add an additional cost "
"column. We can set reverse cost as length."
msgstr "``reverse cost`` を使えるようにするには追加の cost 列を追加する必要があります。私達は reverse cost を length としてセットすることができます。"

# bc3521ed4e74441d8ee318e18c9be0ac
# 2d4f665ef43c4778aeb71a85a4a211bf
# 09d81832d0794b109314317c232cc3ca
#: ../../chapters/shortest_path.rst:46 ../../chapters/shortest_path.rst:157
#: ../../chapters/shortest_path.rst:247
msgid "Description"
msgstr "説明"

# f12688d3d04849a48a3c154308ec46ba
# b5db38d2fff643899f1dfb753395ba87
#: ../../chapters/shortest_path.rst:47 ../../chapters/shortest_path.rst:160
msgid ""
"Returns a set of ``pgr_costResult`` (seq, id1, id2, cost) rows, that make up"
" a path."
msgstr "``pgr_costResult`` (seq, id1, id2, cost) の行セットを返し、これでパスを作り出せます。"

# 295d7e0770cd4a5cadd496c10e6f9ffe
# b0c81488cb3942e69eed8a2b3ed7e508
# 378a1e4c72ef4f2da34089c6387c4245
#: ../../chapters/shortest_path.rst:55 ../../chapters/shortest_path.rst:168
#: ../../chapters/shortest_path.rst:263
msgid "Parameters"
msgstr "パラメータ"

# c9fae122b3cf49ffafc435f0869ac94b
# 1199b7b894dc44649a9cf7699806086a
# 72d37e3b3bfb4f148e81276daeb81947
#: ../../chapters/shortest_path.rst:56 ../../chapters/shortest_path.rst:169
#: ../../chapters/shortest_path.rst:264
msgid ""
"a SQL query, which should return a set of rows with the following columns:"
msgstr "SQLのクエリです。以下に続く列からなる行セットを返します:"

# 07f00c7212ac46a9bd2bdfa1f4307b7c
# 3a8d846a64c64fa1b959afddc7e900d8
# 005d2dcb9e9549f6aa555c25408bf1c4
#: ../../chapters/shortest_path.rst:63 ../../chapters/shortest_path.rst:176
#: ../../chapters/shortest_path.rst:271
msgid "``int4`` identifier of the edge"
msgstr "エッジの識別子[ ``int4`` ]"

# fe98a232f49740e2950f290d1ccfc437
# 5ce3afe4353a41589db576a44d35f687
# c6967008475c44cfb45a6d9003fe9e75
#: ../../chapters/shortest_path.rst:64 ../../chapters/shortest_path.rst:177
#: ../../chapters/shortest_path.rst:272
msgid "``int4`` identifier of the source vertex"
msgstr "``int4`` 型の始点ノードの識別子"

# 8895f526e916415a9922599220c4512e
# 63b3dac9ea724e77b62da24805ac1733
# bcf5835f2b7849b6ba491436f69601ca
#: ../../chapters/shortest_path.rst:65 ../../chapters/shortest_path.rst:178
#: ../../chapters/shortest_path.rst:273
msgid "``int4`` identifier of the target vertex"
msgstr "``int4`` 型の終点ノードの識別子"

# 94b560b5fb93465583f7cac4c9e3e778
# 4e6b5c2ba70643e7b93f538d92d99e89
# 87542a88f86448a8a31b4c20b11206ac
#: ../../chapters/shortest_path.rst:66 ../../chapters/shortest_path.rst:179
#: ../../chapters/shortest_path.rst:274
msgid ""
"``float8`` value, of the edge traversal cost. A negative cost will prevent "
"the edge from being inserted in the graph."
msgstr "``float8`` 型のエッジにかかる重み。負の重みはエッジがグラフに挿入されることを防ぎます。"

# e0524c1b46814a22bf941d668f20a4a5
# bcbe5dea82964c378e869a1654788741
# 9679c6a1ca1f4eaaa568551428205db4
#: ../../chapters/shortest_path.rst:67 ../../chapters/shortest_path.rst:184
#: ../../chapters/shortest_path.rst:275
msgid ""
"(optional) the cost for the reverse traversal of the edge. This is only used"
" when the ``directed`` and ``has_rcost`` parameters are ``true`` (see the "
"above remark about negative costs)."
msgstr "(オプション) エッジの反対方向のコスト。この値は ``directed`` および``has_rcost`` パラメータが ``true`` の場合のみ使用されます。(負のコストについては前述の通りです)"

# d5d6d9ecae6e44888f8d45ccb8bb81c7
# e79789cf0eee439190a505fcd4322a78
# d485ee37dfe949f2ab70ba47113db7f7
#: ../../chapters/shortest_path.rst:69 ../../chapters/shortest_path.rst:186
#: ../../chapters/shortest_path.rst:277
msgid "``int4`` id of the start point"
msgstr "``int4`` 始点ノードのID"

# 7b811a10a460490181ee795419bc79d0
# d2120801bd9d4996a80c5f2381a35deb
#: ../../chapters/shortest_path.rst:70 ../../chapters/shortest_path.rst:187
msgid "``int4`` id of the end point"
msgstr "``int4`` 終点ノードのID"

# d8d9e63f9335443191230673c220c972
# 34565d3f21ed4c80b43e0deae350c6b2
# 7ffccc2d08714ad492b0b9008a169a32
#: ../../chapters/shortest_path.rst:71 ../../chapters/shortest_path.rst:188
#: ../../chapters/shortest_path.rst:279
msgid "``true`` if the graph is directed"
msgstr "有向グラフの場合は ``true`` を指定"

# bd3e073a63f94136a9b215c0a2f1b686
# 7649a8cd8b124be28d43f0dde95230a2
# 3d52e1dd48e140d49fe4f8c6ab8d68f5
#: ../../chapters/shortest_path.rst:72 ../../chapters/shortest_path.rst:189
#: ../../chapters/shortest_path.rst:280
msgid ""
"if ``true``, the ``reverse_cost`` column of the SQL generated set of rows "
"will be used for the cost of the traversal of the edge in the opposite "
"direction."
msgstr "``true`` の場合、SQLで生成される行セットの ``reverse_cost`` 列は、エッジの逆方向にかかる重みとして使用されます。"

# 0342dd83c4434d978158d8c749daaa25
# 3c9000e1ea394325834e3c62a64bc9a0
#: ../../chapters/shortest_path.rst:74 ../../chapters/shortest_path.rst:191
msgid "Returns set of ``pgr_costResult``:"
msgstr "``pgr_costResult`` のセットを返します:"

# d7d539277355452d81e986477d178518
# 6e2fb2cea76843c1a91424e0330b5e7e
# cddd18f244164821a04700b28aa3867e
# e66ca5767fff4f42a369e77e1919b579
#: ../../chapters/shortest_path.rst:76 ../../chapters/shortest_path.rst:193
#: ../../chapters/shortest_path.rst:285 ../../chapters/shortest_path.rst:293
msgid "row sequence"
msgstr "行の連番"

# b05d544347b44d7fa519bdee2acda794
# 634ac46419f54f01851d06f4b7a366ab
#: ../../chapters/shortest_path.rst:77 ../../chapters/shortest_path.rst:194
msgid "node ID"
msgstr "ノードID"

# 9227043825c547cc9d55dc7271d38cef
# a5dbc82444d549e9bba9edf6dddee225
#: ../../chapters/shortest_path.rst:78 ../../chapters/shortest_path.rst:195
msgid "edge ID (``-1`` for the last row)"
msgstr "エッジID (最終行は ``-1``)"

# 1618c1553016418eb4646eec559706c9
# d3ff435ff4a649de89d9f98ab080e8c6
#: ../../chapters/shortest_path.rst:79 ../../chapters/shortest_path.rst:196
msgid "cost to traverse from ``id1`` using ``id2``"
msgstr "``id1`` から ``id2`` を横断するコスト"

# b7c31734e5d74b289de1e41008a4c14a
#: ../../chapters/shortest_path.rst:84
msgid ""
"Many pgRouting functions have ``sql::text`` as one of their arguments. While"
" this may look confusing at first, it makes the functions very flexible as "
"the user can pass any ``SELECT`` statement as function argument as long as "
"the returned result contains the required number of attributes and the "
"correct attribute names."
msgstr "多くの pgRouting の関数は ``sql::text`` を１つ目の引数として持っています。最初は戸惑うかもしれないですが、このことは、返される結果が要求された数の属性と正確な属性名を含む限り、ユーザがどんな ``SELECT`` 文でも関数の引数として渡すことができるため、関数をとてもフレキシブルにしています。"

# c1e9130f6ba743ccaebc518295e23860
#: ../../chapters/shortest_path.rst:85
msgid "Dijkstra algorithm does not require the network geometry."
msgstr "ダイクストラ法はネットワークジオメトリを必要としません。"

# 8868391762da41f49ee07c046e028777
#: ../../chapters/shortest_path.rst:86
msgid ""
"The function does not return a geometry, but only an ordered list of nodes."
msgstr "この関数はジオメトリを返しません、返すのはノードの順序付きリストだけです。"

# 5b39cf246563474e9838973b324843c9
# fd8b543d07194b2f8e5a8a1365662c3f
#: ../../chapters/shortest_path.rst:89 ../../chapters/shortest_path.rst:200
msgid "Example query"
msgstr "クエリの例"

# c026b4af606e4fb3a75ae140c6e7ea32
#: ../../chapters/shortest_path.rst:90
msgid ""
"``pgr_costResult`` is a common result type used by several pgRouting "
"functions. In the case of ``pgr_dijkstra`` the first column is a sequential "
"ID, followed by node ID, edge ID and cost to pass this edge."
msgstr "``pgr_costResult`` はいくつかの pgRouting の関数で使われている共通の返り型です。 ``pgr_dijkstra`` の場合、最初の列はシーケンシャル ID で、そのあとノード ID 、エッジ ID 、このエッジを通過するコストというように続きます。"

# 63799fd22252430a80964e3cbb961f50
# d18900067fea498cb0c5891095dce1d4
# ac404b3dddbf446bb7813859ec47963d
# cc03cf7b37f9474680b18a1c412f79ba
#: ../../chapters/shortest_path.rst:104 ../../chapters/shortest_path.rst:214
#: ../../chapters/shortest_path.rst:313 ../../chapters/shortest_path.rst:338
msgid "Query result"
msgstr "クエリの結果"

# 04a9991c47814f25aaf7f8a367bc5b42
#: ../../chapters/shortest_path.rst:120
msgid ""
"With more complex SQL statements, using JOINs for example, the result may be"
" in a wrong order. In that case ``ORDER BY seq`` will ensure that the path "
"is in the right order again."
msgstr "もっと複雑な SQL 文、例えば JOIN を使った場合は結果が間違った順番になるでしょう。この場合は ``ORDER BY seq`` がパスが再度正しい順番になるのを保証するでしょう。"

# 6aef93cf35254e1d83d9bb423f2a5e21
#: ../../chapters/shortest_path.rst:121
msgid ""
"The returned cost attribute represents the cost specified in the "
"``sql::text`` argument. In this example cost is ``length`` in unit "
"\"kilometers\". Cost may be time, distance or any combination of both or any"
" other attributes or a custom formula."
msgstr "返り値の cost 属性は ``sql::text`` 引数で指定されたコストを表しています。この例の cost は \"キロメートル\" 単位の ``length`` です。コストは時間や距離、それらの組み合わせ、または他の属性や独自の計算式になります。"

# d3943e65cc3b4be09e46bbc9f3d54619
#: ../../chapters/shortest_path.rst:126
msgid "Shortest Path A*"
msgstr "A* アルゴリズムによる最短経路探索"

# 30c23dd57cf94d59ba7df7be0338cb55
#: ../../chapters/shortest_path.rst:128
msgid ""
"A-Star algorithm is another well-known routing algorithm. It adds "
"geographical information to source and target of each network link. This "
"enables the routing query to prefer links which are closer to the target of "
"the shortest path search."
msgstr "A-Star 探索アルゴリズムはもう一つのよく知られたルート検索アルゴリズムです。これはそれぞれのネットワークリンクの source と target に地理的な情報を追加します。このアルゴリズムは、ルート検索クエリが最短経路探索の終点に近いリンクを好むようにします。"

# 50038db481274c06a52f6f9e60d98694
#: ../../chapters/shortest_path.rst:132
msgid ""
"For A-Star you need to prepare your network table and add latitute/longitude"
" columns (``x1``, ``y1`` and ``x2``, ``y2``) and calculate their values."
msgstr "A-Star はあなたのネットワークのテーブルに事前に latitude/longitude 列 (``x1``, ``y1`` と ``x2``, ``y2``) を追加してそれらの値を計算しておく必要があります。"

# 6d8186258e1445cea21c3037121c4555
#: ../../chapters/shortest_path.rst:149
msgid ""
"A bug in a previous version of PostGIS didn't allow the use of "
"``ST_startpoint`` or ``ST_endpoint``."
msgstr "以前のバージョンの PostgreSQL はバグのため ``ST_startpoint`` と ``ST_endpoint`` を使うことができません。"

# aa74e608e83e4caaae6573a4719f2f77
#: ../../chapters/shortest_path.rst:150
msgid ""
"From PostGIS 2.x ``ST_startpoint`` and ``ST_endpoint`` are only valid for "
"``LINESTRING`` geometry type and will fail with ``MULTILINESTING``."
msgstr "PostGIS 2.x から ``ST_startpoint`` と ``ST_endpoint`` は ``LINESTRING`` のジオメトリ型のみ有効で、 ``MULTILINESTING`` では失敗するでしょう。"

# 5192f8dbd59748fdac33bc52f3cef83c
#: ../../chapters/shortest_path.rst:152
msgid ""
"Therefor a slightly more difficult looking query is used. If the network "
"data really contains multi-geomtery linestrings the query might give the "
"wrong start and end point. But in general data has been imported as "
"``MULTILINESTING`` even if it only contains ``LINESTRING`` geometries."
msgstr "そのためちょっとばかり変わったクエリが使われます。もしネットワークデータがマルチジオメトリのラインストリングを実際に含んでいたらクエリは間違った start と end のポイントを与えてしまうでしょう。しかし、たとえ ``LINESTRING`` のジオメトリのみしか含まれていなかったとしていても、一般的にはデータは ``MULTILINESTING`` としてインポートされます。"

# 562ea7ae4c234767bacbf0169fac2cb0
#: ../../chapters/shortest_path.rst:158
msgid ""
"Shortest Path A-Star function is very similar to the Dijkstra function, "
"though it prefers links that are close to the target of the search. The "
"heuristics of this search are predefined, so you need to recompile pgRouting"
" if you want to make changes to the heuristic function itself."
msgstr "A-Star 最短経路関数は Dijkstra 関数ととても似ていて、しかしながらこの関数は検索の対象が近いリンクを好みます。この検索のヒューリスティックは事前に定義され、もしヒューリスティック関数自身に変更を加えたい場合は pgRouting を再コンパイルする必要があります。"

# e107c850e85349d4b0d0c875b6d6c981
#: ../../chapters/shortest_path.rst:180
msgid "``x`` coordinate of the start point of the edge"
msgstr "エッジの始点の ``x`` 座標"

# e3a637f10b7b4a389638d569ad648332
#: ../../chapters/shortest_path.rst:181
msgid "``y`` coordinate of the start point of the edge"
msgstr "エッジの始点の ``y`` 座標"

# 91cacca69f4343eaa8ace243a456d622
#: ../../chapters/shortest_path.rst:182
msgid "``x`` coordinate of the end point of the edge"
msgstr "エッジの終点の ``x`` 座標"

# 740fa1b098d14efd9de1820e3756a3e7
#: ../../chapters/shortest_path.rst:183
msgid "``y`` coordinate of the end point of the edge"
msgstr "エッジの終点の ``y`` 座標"

# 922018146e944ce0b7d29f58fbf060bb
#: ../../chapters/shortest_path.rst:230
msgid ""
"The result of Dijkstra and A-Star are the same, which should be the case."
msgstr "上記の Dijkstra と A-Star の結果は同じになります。結果に相違が出るかは場合によります。"

# 548045f977ea4711b2df65e74a5ad346
#: ../../chapters/shortest_path.rst:231
msgid ""
"A-Star is supposed to be faster than Dijkstra algorithm as the network size "
"is getting larger. But in case of pgRouting the algorithm speed advantage "
"does not matter really compared the time required to select the network data"
" and build the graph."
msgstr "A-Star はネットワークのサイズが大きくなるほどダイクストラ法よりも早くなると想定されます。しかし pgRouting の場合、アルゴリズムのスピードの優位性は、ネットワークデータを選択し、グラフを構築するのに要求される時間に比べると、有意な差としては表れません。"

# 683acb0946b2416cbc9bbee5dc8ba14c
#: ../../chapters/shortest_path.rst:237
msgid "Multiple Shortest Paths with kDijkstra"
msgstr "kDijkstra による複数の最短経路探索"

# fc43f1c0f4a34df29b77da93f85a01da
#: ../../chapters/shortest_path.rst:239
msgid ""
"The kDijkstra functions are very similar to the Dijkstra function but they "
"allow to set multiple destinations with a single function call."
msgstr "kDijkstra 関数は Dijkstra 関数ととても似ていますが一回の関数呼び出しで複数の目的地を設定することができます。"

# f7bf040ca56049768eb441d31083beac
#: ../../chapters/shortest_path.rst:243
msgid "kDijkstra doesn't require additional attributes to Dijkstra algorithm."
msgstr "kDijkstra はダイクストラ法から追加の属性は必要ありません。"

# 1e193f9334c64e6197f08a1b14591e1a
#: ../../chapters/shortest_path.rst:248
msgid ""
"If the main goal is to calculate the total cost, for example to calculate "
"multiple routes for a distance matrix, then ``pgr_kdijkstraCost`` returns a "
"more compact result. In case the paths are important ``pgr_kdijkstraPath`` "
"function returns a result similar to A* or Dijkstra for each destination."
msgstr "例えば距離の行列から複数のルートを計算する場合など、全てのコストを計算するのが主な目的であれば、 ``pgr_kdijkstraCost`` はよりコンパクトな結果を返します。パスが重要な場合 ``pgr_kdijkstraPath`` 関数はそれぞれの行き先における A* または Dijkstra と似た結果を返します。"

# 579b54f4e0bc41bc993dcc85870532d4
#: ../../chapters/shortest_path.rst:251
msgid ""
"Both functions return a set of ``pgr_costResult`` (seq, id1, id2, cost) "
"rows, that summarize the path cost or return the paths."
msgstr "どちらの関数も ``pgr_costResult`` (seq, id1, id2, cost) の行セットを返し、パスのコストを集約したものか、パスを返します。"

# 24ace859adc74619959f6ad2671643e3
#: ../../chapters/shortest_path.rst:278
msgid "``int4[]`` an array of ids of the end points"
msgstr "``int4[]`` 終点ノードのIDの配列"

# 5021f848a56044a6ae9344c3f77dacb2
#: ../../chapters/shortest_path.rst:283
msgid "``pgr_kdijkstraCost`` returns set of ``pgr_costResult``:"
msgstr "``pgr_kdijkstraCost`` は ``pgr_costResult`` の集合を返します:"

# c4294f9b0541465fbf5c8384c0fcfcf4
#: ../../chapters/shortest_path.rst:286
msgid ""
"path vertex source id (this will always be source start point in the query)."
msgstr "始点ノードのIDのパス識別子 (これは常にクエリの始点ポイントとなるでしょう)。"

# dc314ba056774e8f86375b186a516882
#: ../../chapters/shortest_path.rst:287
msgid "path vertex target id"
msgstr "終点ノードのIDのパス識別子"

# e53052e344054df582523bbe14aafce1
#: ../../chapters/shortest_path.rst:288
msgid ""
"cost to traverse the path from ``id1`` to ``id2``. Cost will be -1.0 if "
"there is no path to that target vertex id."
msgstr "``id1`` から ``id2`` へ横断するコスト。もし終点識別子IDへのパスが無ければコストは -1.0 になるでしょう。"

# f5922b5d0732406da6beee23f3a61fd8
#: ../../chapters/shortest_path.rst:291
msgid "``pgr_kdijkstraPath`` returns set of ``pgr_costResult``:"
msgstr "``pgr_kdijkstraPath`` は ``pgr_costResult`` のセットを返します。"

# 9c6e5e946454476994b208d714fec541
#: ../../chapters/shortest_path.rst:294
msgid "path vertex target id (identifies the target path)."
msgstr "終点ノードのIDのパス識別子 (終点のパスを特定します)。"

# 263c235c6b8b4abc8898dad60f6f9e1e
#: ../../chapters/shortest_path.rst:295
msgid "path edge id"
msgstr "エッジIDのパス"

# a3959e9191804fb6a105829b35c6e180
#: ../../chapters/shortest_path.rst:296
msgid "cost to traverse this edge or -1.0 if there is no path to this target"
msgstr "このエッジを横断するコストもしくはこの終点へのパスがなければ -1.0"

# ba538cacda834c579e6e2ee60f308de4
#: ../../chapters/shortest_path.rst:300
msgid "Example query ``pgr_kdijkstraCost``"
msgstr "``pgr_kdijkstraCost`` のクエリの例"

# 769962f349f64c5a895854bf7b6ca9ba
#: ../../chapters/shortest_path.rst:325
msgid "Example query ``pgr_kdijkstraPath``"
msgstr "``pgr_kdijkstraPath`` のクエリの例"

# 4e4e56f7c500405ba2c3325d6b2a6e5f
#: ../../chapters/shortest_path.rst:355
msgid ""
"There are many other functions available with the new pgRouting 2.0 release,"
" but most of them work in a similar way, and it would take too much time to "
"mention them all in this workshop. For the complete list of pgRouting "
"functions see the API documentation: http://docs.pgrouting.org/"
msgstr "新しい pgRouting 2.0 リリースで他にも多くの関数が利用可能になりましたが、その多くは同じような方法で動作し、またこのワークショップでその全てに言及するにはとても時間が足りません。 pgRouting の関数の完全なリストは API ドキュメントを参照してください: http://docs.pgrouting.org/"
