# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2014 Daniel Kastl, Frédéric Junod
# This file is distributed under the same license as the Workshop - FOSS4G routing with pgRouting package.
# 
# Translators:
# Celia Virginia Vergara Castillo, 2014
msgid ""
msgstr ""
"Project-Id-Version: Workshop\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-10 09:37+0900\n"
"PO-Revision-Date: 2014-11-10 00:39+0000\n"
"Last-Translator: Daniel Kastl\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/pgrouting-workshop/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 089b7578ef5840b180aa5d7d86cb0081
#: ../../chapters/ol3_client.rst:13
msgid "OpenLayers 3 Based Routing Interface"
msgstr ""

# c59917b7f0d14996b7be86622cab9da6
#: ../../chapters/ol3_client.rst:15
msgid ""
"The goal of this chapter is to create a simple web-based user interface to "
"pgRouting based on OpenLayers 3. The user will be able to choose start and "
"destination locations, and get the route from the start point to the "
"destination point."
msgstr ""

# 05c427afc52b4248bf7bea3562efa059
#: ../../chapters/ol3_client.rst:17
msgid ""
"The start and destination points are created by the user, with simple clicks"
" on the map. The start and destination coordinates are then sent to the WMS "
"server (GeoServer), as parameters to a WMS ``GetMap`` request. The resulting"
" image is added as an *image* layer to the map."
msgstr ""

# 31de18031625441eb59c6c05030c2ed1
#: ../../chapters/ol3_client.rst:20
msgid "OpenLayers 3 introduction"
msgstr ""

# 2e919b841ac6426cba9383562157773b
#: ../../chapters/ol3_client.rst:22
msgid ""
"OpenLayers 3 is a complete rewrite of OpenLayers 2. It uses modern "
"JavaScript, and HTML5 technologies such as Canvas and WebGL for the "
"rendering of images/tiles and vectors."
msgstr ""

# fb7e6ce4b810478193bb10e9b2f1a909
#: ../../chapters/ol3_client.rst:24
msgid ""
"Creating an OpenLayers 3 map in a web page involves creating a *map* object,"
" which is an instance of the ``ol.Map`` class. Then, data layers and "
"controls can be added to that map object."
msgstr ""

# 5ddc481384db4b0ea1241e0c53a9d3ef
#: ../../chapters/ol3_client.rst:26
msgid ""
"The center and resolution (zoom level) of the map are controlled through the"
" *view* object. Unless other mapping libraries, the view is separated from "
"the map; one advantage is to allow multiple maps to share the same view. See"
" `this example <http://openlayers.org/en/master/examples/preload.html>`_."
msgstr ""

# e9fcea71ace3416cb24bf50e058b64a7
#: ../../chapters/ol3_client.rst:28
msgid ""
"OpenLayers 3 features three renderers: the *Canvas* renderer, the *WebGL* "
"renderer, and the *DOM* renderer. Currently, the most capable renderer is "
"Canvas. In particular the Canvas renderer supports vector layers, while the "
"other two don't. Canvas is the default renderer, and the renderer used in "
"this workshop."
msgstr ""

# f18b511f59624ea6ab876a6713d2b33b
#: ../../chapters/ol3_client.rst:30
msgid ""
"In the future the WebGL renderer will be used to draw large quantities of "
"vectors and 3D objects."
msgstr ""

# 72a97153f9434fe8968085dd9b99440e
#: ../../chapters/ol3_client.rst:33
msgid "Creating a minimal map"
msgstr "Crear un mapa mínimo"

# cf00f926a07b465aa32399d593b5b13e
#: ../../chapters/ol3_client.rst:35
msgid ""
"Let's create our first OpenLayers 3 map: open a text editor and copy this "
"code into a file named ``ol3.html``. You can save this file on the "
"``Desktop`` and open it with a web browser."
msgstr ""

# 42ee030cc4214e05a6d94bde127afe87
#: ../../chapters/ol3_client.rst:41
msgid ""
"This web page includes a simple map with an OpenStreetMap layer and center "
"to a predifined location. There is no routing-related code for now; just a "
"simple map with stantard navigation tools."
msgstr ""

# f62b9d30e9714e99954ba1c927600d42
#: ../../chapters/ol3_client.rst:43
msgid "Line by line we have:"
msgstr "Línea por línea tenemos:"

# 813371a2bf6142cb921495b8d0f88a52
#: ../../chapters/ol3_client.rst:45
msgid "Line 6: include the default OpenLayers CSS file."
msgstr ""

# 8eca9ba90d454979aafa1a4e66f4362e
#: ../../chapters/ol3_client.rst:46
msgid ""
"Line 7 to Line 12: CSS rules to give dimensions to the map DOM element."
msgstr ""

# 7a4c508020a94d9a8a13d5b8c23858e8
#: ../../chapters/ol3_client.rst:47
msgid ""
"Line 15: add a div element for the map. The element's identifier is ``map``."
msgstr ""

# 69f4dbdb5d6a4dbb9b740bfd8924c88f
#: ../../chapters/ol3_client.rst:48
msgid ""
"Line 16: load the OpenLayers 3 library code. Functions and classes in the "
"``ol`` namespace come from there."
msgstr ""

# 787da7482e0e4a8784c587f96c5b1c86
#: ../../chapters/ol3_client.rst:49
msgid "Line 18 to Line 29: the JavaScript code specific to that example."
msgstr ""

# d097005a76c045a4aee10bf1565a34a0
#: ../../chapters/ol3_client.rst:51
msgid ""
"Let's have a closer look at the code that create the OpenLayers 3 code:"
msgstr ""

# 8fdbdf835b524fcb97e55831432e525f
#: ../../chapters/ol3_client.rst:73
msgid ""
"This code creates an ``ol.Map`` instance whose ``target`` is the ``map`` DOM"
" element in the HTML page. The map is configured with a *tile layer*, itself"
" configured with an OpenStreetMap *source*. The map is also configured with "
"a *view* instance (of the ``ol.View`` class) with predefined values for the "
"*center* and the *zoom* level."
msgstr ""

# 487c1692725744d2a91a87c00e33d6a1
#: ../../chapters/ol3_client.rst:75
msgid ""
"You can change the center and zoom level in the code and observe the effect "
"of your changes by reloading the page in the browser. You can also use the "
"browser's JavaScript console to make live changes to the view. For example:"
msgstr ""

# 6d8fbfab2e67483b80b31f4b5f619b9c
#: ../../chapters/ol3_client.rst:85
msgid "WMS GET parameters"
msgstr ""

# f3514150ee6e4324bd989c1ccfb13cdc
#: ../../chapters/ol3_client.rst:87
msgid "Add this code after the creation of the map:"
msgstr ""

# d1d626f2807b41789bf8bf1e3a088b2a
#: ../../chapters/ol3_client.rst:96
msgid ""
"The ``params`` object holds the WMS GET parameters that will be sent to "
"GeoServer. Here we set the values that will never change: the layer name and"
" the output format."
msgstr ""

# fa082939ca604dcda69d4adb96adc8d8
#: ../../chapters/ol3_client.rst:100
msgid "Select \"start\" and \"destination\""
msgstr ""

# 667f56903bda488cb17797d0a32e5495
#: ../../chapters/ol3_client.rst:102
msgid ""
"We now want to allow the user to add the start and destination positions by "
"clicking on the map. Add the following code for that:"
msgstr ""

# 1c133b4d03a9425ca738ffa932a55bae
#: ../../chapters/ol3_client.rst:119
msgid ""
"That code creates two vector features, one for the \"start\" position and "
"one for the \"destination\" position. These features are empty for now – "
"they do not include a geometry."
msgstr ""

# 457590c4de7d40708a0aee0c71f1e3e2
#: ../../chapters/ol3_client.rst:121
msgid ""
"The code also creates a vector layer, with the \"start\" and \"destination\""
" features added to it. It also adds the vector layer to the map, using the "
"map's ``addLayer`` method."
msgstr ""

# d3a66eda00224f968a656c86a96d37a2
#: ../../chapters/ol3_client.rst:123
msgid "Now add the following code:"
msgstr ""

# defde27f7a984cfa873d8e3db66a7352
#: ../../chapters/ol3_client.rst:158
msgid ""
"This code registers a listener function for the map ``click`` event. This "
"means that OpenLayers 3 will call that function each time a click is "
"detected on the map."
msgstr ""

# 27e0390e3b85428390ce971dad6d7afc
#: ../../chapters/ol3_client.rst:160
msgid ""
"The event object passed to the listener function includes a ``coordinate`` "
"property that indicates the geographical location of the click. That "
"coordinate is used to create a *point* geometry for the \"start\" and "
"\"destination\" features."
msgstr ""

# c6f447a97a8d4d2f9cffe89be1f046be
#: ../../chapters/ol3_client.rst:162
msgid ""
"Once we have the start and destination points (after two clicks); the two "
"pairs of coordinates are transformed from the map projection (``EPSG:3857``)"
" into the server projection (``EPSG:4326``) using the ``transform`` "
"function."
msgstr ""

# 5961b5f22e3a460d858386896a9eac4d
#: ../../chapters/ol3_client.rst:164
msgid ""
"The ``viewparams`` property is then set on WMS GET parameters object. The "
"value of this property has a special meaning: GeoServer will substitute the "
"value before executing the SQL query for the layer. For example, if we have:"
msgstr ""

# 6a1de7563bec4db5a31db180ba2d9dc2
#: ../../chapters/ol3_client.rst:170
msgid ""
"And ``viewparams`` is ``viewparams=min:20;max:120`` then the SQL query sent "
"to PostGIS will be:"
msgstr ""

# 91909cf0fbde435fbfe2b69f422ad88b
#: ../../chapters/ol3_client.rst:176
msgid ""
"Finally, a new OpenLayers WMS layer is created and added to the map, the "
"param object is passed to it."
msgstr ""

# 059a51e92905423eaaa4c68ce43edfb7
#: ../../chapters/ol3_client.rst:179
msgid "Clear the results"
msgstr ""

# 90397774abd747558c8ad7882f1a09d2
#: ../../chapters/ol3_client.rst:181
msgid "Add this after the map ``div`` in the HTML page:"
msgstr ""

# 71d35562ec3c40028d1f6c0021163138
#: ../../chapters/ol3_client.rst:187
msgid ""
"This creates a button to we will use to allow the user to clear the routing "
"points and start a new routing query."
msgstr ""

# 9692a70d29a44911afc931eb8cea162d
#: ../../chapters/ol3_client.rst:189
msgid "Now add the following to the JavaScript code:"
msgstr ""

# 1bc92ecbdc5342e8a6771fbb7a628dcc
#: ../../chapters/ol3_client.rst:203
msgid ""
"When the button is clicked, this function passed to ``addEventListener`` is "
"executed. That function resets the \"start\" and \"destination\" features "
"and remove the routing result layer from the map."
msgstr ""
